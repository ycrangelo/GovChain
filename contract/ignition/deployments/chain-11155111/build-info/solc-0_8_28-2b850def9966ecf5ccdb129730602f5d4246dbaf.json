{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-2b850def9966ecf5ccdb129730602f5d4246dbaf",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Voting.sol": "project/contracts/Voting.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/IGovProjects.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IGovProjects {\n    enum Status { Pending, Rejected, Approved, Ongoing, Completed }\n\n    function updateStatus(uint256 _projectId, Status _status) external;\n\n    function getPDF(uint8 _projectId)  external view returns (string memory);\n\n    function projects(uint256 _projectId) external view returns (\n        uint256 projectId,\n        string memory projectName,\n        string memory location,\n        uint budgetPeso,\n        address[] memory signatories,\n        address[] memory engineers,\n        address[] memory contractors,\n        string memory timelineStart,\n        string memory timelineEnd,\n        Status status,\n        string memory proposalLink\n    );\n}"
      },
      "project/contracts/Voting.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IGovProjects.sol\";\n\nerror NotEnoughBalance();\nerror AlreadyVoted();\nerror NoVoteCast();\nerror NotEligibleVoter();\n\ncontract Voting {\n    IERC20 internal immutable i_govToken;\n    IGovProjects internal immutable i_govProjects;\n\n    constructor(address _govToken, address _projectContract) {\n        i_govToken = IERC20(_govToken); // governance token contract\n        i_govProjects = IGovProjects(_projectContract); // project/nft contract\n    }\n\n    struct Vote {\n        uint256 yes;\n        uint256 no;\n        address[] eligibleVoters;\n        uint256 votedCount;\n        bool finalized;\n        mapping(address => bool) hasVoted; \n        mapping(address => bool) votedYes;\n        mapping(address => bool) votedNo;\n        mapping(address => bool) isEligible;\n    }\n\n    mapping(uint256 => Vote) private votes;\n    uint256 public approvalThreshold = 70; // 70%\n\n    // ------------------------\n    // EVENTS\n    // ------------------------\n    event VoteSessionCreated(uint256 indexed projectId, address[] eligibleVoters);\n    event VoteCast(uint256 indexed projectId, address indexed voter, bool approved, uint256 weight);\n    event VoteFinalized(uint256 indexed projectId, bool approved, uint256 yesVotes, uint256 noVotes);\n\n    /// @notice Create a vote session with eligible voters\n    function createVoteSession(uint256 _projectId, address[] calldata _eligibleVoters) external {\n        Vote storage voter = votes[_projectId];\n        require(voter.eligibleVoters.length == 0, \"Vote session already exists\");\n\n        for (uint256 i = 0; i < _eligibleVoters.length; i++) {\n            voter.eligibleVoters.push(_eligibleVoters[i]);\n            voter.isEligible[_eligibleVoters[i]] = true;\n        }\n\n        emit VoteSessionCreated(_projectId, _eligibleVoters);\n    }\n\n    /// @notice Cast a vote\n    function vote(uint256 _projectId, bool approve) \n        external \n        checkBalance \n        checkEligibility(_projectId) \n        checkHasNotVoted(_projectId) \n    {\n        Vote storage voter = votes[_projectId];\n        uint256 voterBalance = i_govToken.balanceOf(msg.sender);\n\n        if (approve) {\n            voter.yes += voterBalance;\n            voter.votedYes[msg.sender] = true;\n        } else {\n            voter.no += voterBalance;\n            voter.votedNo[msg.sender] = true;\n        }\n\n        voter.hasVoted[msg.sender] = true;\n        voter.votedCount++;\n\n        emit VoteCast(_projectId, msg.sender, approve, voterBalance);\n\n        //  Auto-finalize if all voters already voted\n        if (voter.votedCount == voter.eligibleVoters.length) {\n            autoFinalize(_projectId);\n        }\n    }\n\n    /// @notice Finalize results manually (optional if not all voted yet)\n    function ManualFinalize(uint256 _projectId) external {\n        autoFinalize(_projectId);\n    }\n\n    /// @notice Internal finalize logic\n    function autoFinalize(uint256 _projectId) internal {\n        Vote storage voter = votes[_projectId];\n\n        require(!voter.finalized, \"Already finalized\");\n\n        uint256 yesVotes = voter.yes;\n        uint256 noVotes = voter.no;\n\n        uint256 totalVotes = yesVotes + noVotes;\n        if (totalVotes == 0) {\n            revert NoVoteCast();\n        }\n\n        uint256 yesPercent = (yesVotes * 100) / totalVotes;\n        bool approved = yesPercent >= approvalThreshold;\n\n        if (approved) {\n            i_govProjects.updateStatus(_projectId, IGovProjects.Status.Approved);\n        } else {\n            i_govProjects.updateStatus(_projectId, IGovProjects.Status.Rejected);\n        }\n\n        voter.finalized = true;\n\n        emit VoteFinalized(_projectId, approved, yesVotes, noVotes);\n    }\n\n    /// @notice Check if all eligible voters have voted\n    function allVoted(uint256 _projectId) external view returns (bool) {\n        Vote storage voter = votes[_projectId];\n        return voter.votedCount == voter.eligibleVoters.length;\n    }\n\n    // ------------------------\n    // MODIFIERS\n    // ------------------------\n\n    modifier checkBalance() {\n        if (i_govToken.balanceOf(msg.sender) < 1) {\n            revert NotEnoughBalance();\n        }\n        _;\n    }\n\n    modifier checkHasNotVoted(uint256 _projectId) {\n        if (votes[_projectId].hasVoted[msg.sender]) {\n            revert AlreadyVoted();\n        }\n        _;\n    }\n\n    modifier checkEligibility(uint256 _projectId) {\n        if (!votes[_projectId].isEligible[msg.sender]) {\n            revert NotEligibleVoter();\n        }\n        _;\n    }\n}\n"
      }
    }
  }
}